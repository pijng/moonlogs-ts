/**
 * Moonlogs
 * Moonlogs API
 *
 * OpenAPI spec version: 0.5.7
 * Contact: shalpack@gmail.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("DefaultApi", () => {
  let instance: api.DefaultApi
  beforeEach(function() {
    instance = new api.DefaultApi(config)
  });

  test("apiApiTokensGet", () => {
    return expect(instance.apiApiTokensGet({})).resolves.toBe(null)
  })
  test("apiApiTokensIdDelete", () => {
    const id: number = 56
    return expect(instance.apiApiTokensIdDelete(id, {})).resolves.toBe(null)
  })
  test("apiApiTokensIdGet", () => {
    const id: number = 56
    return expect(instance.apiApiTokensIdGet(id, {})).resolves.toBe(null)
  })
  test("apiApiTokensIdPut", () => {
    const id: number = 56
    const body: api.ApiToken = undefined
    return expect(instance.apiApiTokensIdPut(id, body, {})).resolves.toBe(null)
  })
  test("apiApiTokensPost", () => {
    const body: api.ApiToken = undefined
    return expect(instance.apiApiTokensPost(body, {})).resolves.toBe(null)
  })
  test("apiLogsGet", () => {
    const page: number = 56
    const limit: number = 56
    return expect(instance.apiLogsGet(page, limit, {})).resolves.toBe(null)
  })
  test("apiLogsGroupSchemaNameHashGet", () => {
    const schemaName: string = "schemaName_example"
    const hash: string = "hash_example"
    return expect(instance.apiLogsGroupSchemaNameHashGet(schemaName, hash, {})).resolves.toBe(null)
  })
  test("apiLogsIdGet", () => {
    const id: number = 56
    return expect(instance.apiLogsIdGet(id, {})).resolves.toBe(null)
  })
  test("apiLogsPost", () => {
    const body: api.Record = undefined
    return expect(instance.apiLogsPost(body, {})).resolves.toBe(null)
  })
  test("apiLogsSearchPost", () => {
    const body: api.Record = undefined
    const page: number = 56
    const limit: number = 56
    const from: string = "from_example"
    const to: string = "to_example"
    return expect(instance.apiLogsSearchPost(body, page, limit, from, to, {})).resolves.toBe(null)
  })
  test("apiSchemasGet", () => {
    return expect(instance.apiSchemasGet({})).resolves.toBe(null)
  })
  test("apiSchemasIdDelete", () => {
    const id: number = 56
    return expect(instance.apiSchemasIdDelete(id, {})).resolves.toBe(null)
  })
  test("apiSchemasIdGet", () => {
    const id: number = 56
    return expect(instance.apiSchemasIdGet(id, {})).resolves.toBe(null)
  })
  test("apiSchemasIdPut", () => {
    const id: number = 56
    const body: api.Schema = undefined
    return expect(instance.apiSchemasIdPut(id, body, {})).resolves.toBe(null)
  })
  test("apiSchemasPost", () => {
    const body: api.Schema = undefined
    return expect(instance.apiSchemasPost(body, {})).resolves.toBe(null)
  })
  test("apiSessionGet", () => {
    return expect(instance.apiSessionGet({})).resolves.toBe(null)
  })
  test("apiSessionPost", () => {
    const body: api.Credentials = undefined
    return expect(instance.apiSessionPost(body, {})).resolves.toBe(null)
  })
  test("apiSetupRegisterAdminPost", () => {
    const body: api.User = undefined
    return expect(instance.apiSetupRegisterAdminPost(body, {})).resolves.toBe(null)
  })
  test("apiTagsGet", () => {
    return expect(instance.apiTagsGet({})).resolves.toBe(null)
  })
  test("apiTagsIdDelete", () => {
    const id: number = 56
    return expect(instance.apiTagsIdDelete(id, {})).resolves.toBe(null)
  })
  test("apiTagsIdGet", () => {
    const id: number = 56
    return expect(instance.apiTagsIdGet(id, {})).resolves.toBe(null)
  })
  test("apiTagsIdPut", () => {
    const id: number = 56
    const body: api.Tag = undefined
    return expect(instance.apiTagsIdPut(id, body, {})).resolves.toBe(null)
  })
  test("apiTagsPost", () => {
    const body: api.Tag = undefined
    return expect(instance.apiTagsPost(body, {})).resolves.toBe(null)
  })
  test("apiUsersGet", () => {
    return expect(instance.apiUsersGet({})).resolves.toBe(null)
  })
  test("apiUsersIdDelete", () => {
    const id: number = 56
    return expect(instance.apiUsersIdDelete(id, {})).resolves.toBe(null)
  })
  test("apiUsersIdGet", () => {
    const id: number = 56
    return expect(instance.apiUsersIdGet(id, {})).resolves.toBe(null)
  })
  test("apiUsersIdPut", () => {
    const id: number = 56
    const body: api.User = undefined
    return expect(instance.apiUsersIdPut(id, body, {})).resolves.toBe(null)
  })
  test("apiUsersPost", () => {
    const body: api.User = undefined
    return expect(instance.apiUsersPost(body, {})).resolves.toBe(null)
  })
})

