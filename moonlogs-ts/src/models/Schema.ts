/* tslint:disable */
/* eslint-disable */
/**
 * Moonlogs
 * Moonlogs API
 *
 * The version of the OpenAPI document: 0.5.10
 * Contact: shalpack@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    SchemaField,
    SchemaFieldFromJSON,
    SchemaFieldFromJSONTyped,
    SchemaFieldToJSON,
} from './SchemaField';
import {
    SchemaKind,
    SchemaKindFromJSON,
    SchemaKindFromJSONTyped,
    SchemaKindToJSON,
} from './SchemaKind';

/**
 * 
 * @export
 * @interface Schema
 */
export interface Schema {
    /**
     * 
     * @type {number}
     * @memberof Schema
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    name: string;
    /**
     * 
     * @type {Array<SchemaField>}
     * @memberof Schema
     */
    fields: Array<SchemaField>;
    /**
     * 
     * @type {Array<SchemaKind>}
     * @memberof Schema
     */
    kinds: Array<SchemaKind>;
    /**
     * 
     * @type {number}
     * @memberof Schema
     */
    tagId?: number;
    /**
     * 
     * @type {number}
     * @memberof Schema
     */
    retentionDays?: number;
}

export function SchemaFromJSON(json: any): Schema {
    return SchemaFromJSONTyped(json, false);
}

export function SchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): Schema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'name': json['name'],
        'fields': ((json['fields'] as Array<any>).map(SchemaFieldFromJSON)),
        'kinds': ((json['kinds'] as Array<any>).map(SchemaKindFromJSON)),
        'tagId': !exists(json, 'tag_id') ? undefined : json['tag_id'],
        'retentionDays': !exists(json, 'retention_days') ? undefined : json['retention_days'],
    };
}

export function SchemaToJSON(value?: Schema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'title': value.title,
        'description': value.description,
        'name': value.name,
        'fields': ((value.fields as Array<any>).map(SchemaFieldToJSON)),
        'kinds': ((value.kinds as Array<any>).map(SchemaKindToJSON)),
        'tag_id': value.tagId,
        'retention_days': value.retentionDays,
    };
}

