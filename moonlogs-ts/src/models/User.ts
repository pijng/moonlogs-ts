/* tslint:disable */
/* eslint-disable */
/**
 * Moonlogs
 * Moonlogs API
 *
 * The version of the OpenAPI document: 0.5.10
 * Contact: shalpack@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Role,
    RoleFromJSON,
    RoleFromJSONTyped,
    RoleToJSON,
} from './Role';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    passwordDigest?: string;
    /**
     * 
     * @type {Role}
     * @memberof User
     */
    role: Role | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof User
     */
    tags: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    token?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    isRevoked: boolean;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'email': json['email'],
        'password': json['password'],
        'passwordDigest': !exists(json, 'password_digest') ? undefined : json['password_digest'],
        'role': RoleFromJSON(json['role']),
        'tags': json['tags'],
        'token': !exists(json, 'token') ? undefined : json['token'],
        'isRevoked': json['is_revoked'],
    };
}

export function UserToJSON(value?: User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'email': value.email,
        'password': value.password,
        'password_digest': value.passwordDigest,
        'role': RoleToJSON(value.role),
        'tags': value.tags,
        'token': value.token,
        'is_revoked': value.isRevoked,
    };
}

